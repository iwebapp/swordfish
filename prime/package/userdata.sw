#>>==>>|prime|package.userdata|/prime/package/userdata.sw
(package "package.userdata" (lambda (NS)
	HiddenKeyPrefix:"."
	PackageNameKey:"#"
	window:(JSEval "window")
	document:(JSEval "document")
	getObject:(lambda (obj)
		(if (&& (!= (typeof obj) "undefined") (!= (typeof window) "undefined") (|| (=== obj window) (=== obj document) (&& (!= obj null) (== (. obj "hasOwnProperty") null))))
			(do pnk:(+ HiddenKeyPrefix (. NS PackageNameKey))
				(if (! (pnk in obj))
					(. obj pnk {
							})
					)
				(. obj pnk)
				)
			obj
			)
		)
	getWrap:(lambda (_obj pack)
		obj:(getObject _obj)
		pnk:(+ HiddenKeyPrefix (. pack PackageNameKey))
		(? (in pnk obj true) (. obj pnk) false)
		)
	(. NS "Get" (lambda (_obj key defaultValue pack notCreate)
			wrap:(getWrap _obj pack)
			(if (! wrap)
				(if notCreate
					defaultValue
					(do wrap=(. (getObject _obj) (+ HiddenKeyPrefix (. pack PackageNameKey)) {
								})
						(. wrap key defaultValue)
						)
					)
				(if (in key wrap true)
					(. wrap key)
					(if notCreate
						defaultValue
						(. wrap key defaultValue)
						)
					)
				)
			))
	SetClass:(. NS "SetClass" (lambda (_obj pack)
			obj:(getObject _obj)
			pnk:(+ HiddenKeyPrefix (. pack PackageNameKey))
			(if (! (in pnk obj true))
				(. obj pnk {
						})
				)
			))
	(. NS "Set" (lambda (_obj key value pack)
			obj:(getObject _obj)
			(SetClass _obj pack)
			(. (. obj (+ HiddenKeyPrefix (. pack PackageNameKey))) key value)
			))
	(. NS "IsClass" (lambda (_obj pack)
			obj:(getObject _obj)
			type:(typeof obj)
			(? (|| (&& (== type "object") (!= obj null)) (== type "lambda") (== type "function") (== type "array")) (in (+ HiddenKeyPrefix (. pack PackageNameKey)) obj) false)
			))
	(. NS "DeleteAll" (lambda (_obj pack)
			obj:(getObject _obj)
			pnk:(+ HiddenKeyPrefix (. pack PackageNameKey))
			(if (in pnk obj true)
				(delete obj pnk)
				)
			))
	(. NS "SelectivelyDelete" (lambda (_obj pack selector)
			obj:(getObject _obj)
			pnk:(+ HiddenKeyPrefix (. pack PackageNameKey))
			wrap:(getWrap _obj pack)
			(if wrap
				(for wrap (lambda (key)
						(if (selector key)
							(delete wrap key)
							)
						))
				)
			))
	(. NS "Remove" (lambda (_obj key defaultValue pack)
			wrap:(getWrap _obj pack)
			(if (! wrap)
				defaultValue
				(if (in key wrap true)
					(do value:(. wrap key)
						(delete wrap key)
						value
						)
					defaultValue
					)
				)
			))
	))
